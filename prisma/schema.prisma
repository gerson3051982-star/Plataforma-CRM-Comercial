generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OpportunityStatus {
  NEW
  IN_PROGRESS
  WON
  LOST
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
}

enum ActivityStatus {
  PLANNED
  COMPLETED
  CANCELLED
}

model TeamMember {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String
  email        String       @unique
  role         String?
  contacts     Contact[]    @relation("ContactOwner")
  opportunities Opportunity[] @relation("OpportunityOwner")
  activities   Activity[]
  userId       String?      @unique
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Company {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  city         String?
  state        String?
  country      String?
  industry     String?
  website      String?
  description  String?
  contacts     Contact[]
  opportunities Opportunity[]

  @@unique([name, city, country])
  @@index([city])
}

model Tag {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  name      String     @unique
  color     String?    // hex color for UI highlights
  contacts  ContactTag[]
}

model Contact {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  firstName      String
  lastName       String
  email          String?        @unique
  phone          String?
  jobTitle       String?
  city           String?
  state          String?
  country        String?
  notes          String?
  companyId      Int?
  ownerId        Int?
  company        Company?       @relation(fields: [companyId], references: [id], onDelete: SetNull)
  owner          TeamMember?    @relation("ContactOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  tags           ContactTag[]
  opportunities  Opportunity[]
  activities     Activity[]

  @@index([lastName])
  @@index([city])
  @@index([companyId])
}

model ContactTag {
  contactId Int
  tagId     Int
  assignedAt DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contactId, tagId])
}

model Opportunity {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  title              String
  description        String?
  value              Decimal?          @db.Decimal(12, 2)
  status             OpportunityStatus @default(NEW)
  estimatedCloseDate DateTime?
  companyId          Int?
  contactId          Int?
  ownerId            Int?
  company            Company?          @relation(fields: [companyId], references: [id], onDelete: SetNull)
  contact            Contact?          @relation(fields: [contactId], references: [id], onDelete: SetNull)
  owner              TeamMember?       @relation("OpportunityOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  activities         Activity[]

  @@index([status])
  @@index([estimatedCloseDate])
  @@index([companyId])
  @@index([contactId])
}

model Activity {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  type            ActivityType
  status          ActivityStatus  @default(PLANNED)
  subject         String
  notes           String?
  scheduledFor    DateTime?
  dueDate         DateTime?
  completedAt     DateTime?
  contactId       Int?
  opportunityId   Int?
  teamMemberId    Int?
  contact         Contact?        @relation(fields: [contactId], references: [id], onDelete: SetNull)
  opportunity     Opportunity?    @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  teamMember      TeamMember?     @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)

  @@index([type])
  @@index([scheduledFor])
  @@index([dueDate])
  @@index([teamMemberId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  passwordHash   String
  role           String?   @default("member")
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  teamMember     TeamMember?
  accounts       Account[]
  sessions       Session[]
  sessionLogs    SessionLog[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SessionLog {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  userId     String
  email      String
  ipAddress  String?
  userAgent  String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
